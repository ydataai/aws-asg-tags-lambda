name: Prereleased



on:
  release:
    types:
    - prereleased



env:
  DOCKERHUB_REGISTRY: ydata
  DOCKER_REPOSITORY_COMMAND: aws-asg-tags-command
  DOCKER_REPOSITORY_LAMBDA: aws-asg-tags-lambda



permissions:
  id-token: write
  contents: read
  packages: write



jobs:
  cancel_previous:
    name: 'Cancel Previous Runs'
    runs-on: ubuntu-20.04
    timeout-minutes: 3

    steps:
      - uses: ydataai/cancel-workflow-action@0.7.0-fix
        with:
          ignore_sha: true
          access_token: ${{ github.token }}


  prepare:
    name: Prepare
    runs-on: ubuntu-20.04

    needs:
    - cancel_previous

    outputs:
      version: ${{ steps.version.outputs.value }}

    steps:
    - name: Version
      id: version
      run: echo ::set-output name=value::${GITHUB_REF#refs/*/}


  build-command:
    name: Build and push the COMMAND version
    runs-on: ubuntu-20.04

    needs:
    - prepare

    steps:
    - uses: actions/checkout@v3

    - uses: actions/cache@v3
      with:
        path: .build
        key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
        restore-keys: |
          ${{ runner.os }}-spm-

    - name: Login to Dockerhub Registry
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}

    - name: Build and push docker image
      id: docker_build
      uses: docker/build-push-action@v3
      env:
        DOCKER_IMAGE_TAG: ${{ env.DOCKERHUB_REGISTRY }}/${{ env.DOCKER_REPOSITORY_COMMAND }}:${{ needs.prepare.outputs.version }}
      with:
        file: command.Dockerfile
        push: true
        tags: ${{ env.DOCKER_IMAGE_TAG }}


  build-lambda:
    name: Build and push LAMBDA version
    runs-on: ubuntu-20.04

    needs:
    - prepare

    steps:
    - uses: actions/checkout@v3

    - uses: actions/cache@v3
      with:
        path: .build
        key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
        restore-keys: |
          ${{ runner.os }}-spm-

    - name: Login to Dockerhub Registry
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}

    - name: Build and push docker image
      id: docker_build
      uses: docker/build-push-action@v3
      env:
        DOCKER_IMAGE_TAG: ${{ env.DOCKERHUB_REGISTRY }}/${{ env.DOCKER_REPOSITORY_LAMBDA }}:${{ needs.prepare.outputs.version }}
      with:
        file: lambda.Dockerfile
        push: true
        tags: ${{ env.DOCKER_IMAGE_TAG }}


  update-manifests:
    name: Update AWS Marketplace
    runs-on: ubuntu-20.04

    needs:
    - prepare
    - build-command

    env:
      COMPONENT: ASG_TAGS_VERSION

    steps:
    - name: Checkout AWS Marketplace repo
      uses: actions/checkout@v3
      with:
        repository: ydataai/aws-marketplace
        token: ${{ secrets.ACCESS_TOKEN }}

    - name: Update aws-marketplace
      env:
        VERSION: ${{ needs.prepare.outputs.version }}
      run: echo ${{ env.VERSION }} > ${{ env.COMPONENT }}

    - name: Commit and push image update into manifests repo
      env:
        VERSION: ${{ needs.prepare.outputs.version }}
      run: |
        git config user.email "azory@ydata.ai"
        git config user.name "Azory YData Bot"
        git add ${{ env.COMPONENT }}
        git commit -a -m "chore(bump): [CI] [DEV] bump ${{ env.COMPONENT }} to $VERSION"
        git push origin master
