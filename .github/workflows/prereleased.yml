name: Prereleased



on:
  release:
    types:
    - prereleased



env:
  DOCKERHUB_REGISTRY: ydata
  DOCKER_REPOSITORY_COMMAND: aws-asg-tags-command
  DOCKER_REPOSITORY_LAMBDA: aws-asg-tags-lambda

  AWS_S3_REGION: ${{ secrets.AWS_S3_REGION }}
  SBOM_FILENAME: docker-sbom
  NOTION_DATABASE_ID: ${{ secrets.NOTION_REPOS_DATABASE_ID }}



permissions:
  id-token: write
  contents: read
  packages: write



jobs:
  cancel_previous:
    name: 'Cancel Previous Runs'
    runs-on: ubuntu-20.04
    timeout-minutes: 3

    steps:
      - uses: ydataai/cancel-workflow-action@0.7.0-fix
        with:
          ignore_sha: true
          access_token: ${{ github.token }}


  prepare:
    name: Prepare
    runs-on: ubuntu-20.04

    needs:
    - cancel_previous

    outputs:
      version: ${{ steps.version.outputs.value }}

    steps:
    - name: Version
      id: version
      run: echo "value=${GITHUB_REF#refs/*/}" >> $GITHUB_OUTPUT


  build-command:
    name: Build and push the COMMAND version
    runs-on: ubuntu-20.04

    needs:
    - prepare

    steps:
    - uses: actions/checkout@v3

    - uses: actions/cache@v3
      with:
        path: .build
        key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
        restore-keys: |
          ${{ runner.os }}-spm-

    - name: Build Docker Image
      id: docker_build
      uses: docker/build-push-action@v4
      env:
        DOCKER_IMAGE_TAG: ${{ env.DOCKER_REPOSITORY_COMMAND }}:${{ needs.prepare.outputs.version }}
      with:
        context: .
        file: command.Dockerfile
        push: false
        load: true
        tags: ${{ env.DOCKER_IMAGE_TAG }}

    - name: Create Docker SBOM
      uses: anchore/sbom-action@v0
      with:
        upload-artifact-retention: 1
        image: ${{ steps.docker_build.outputs.imageId }}
        format: spdx-json
        upload-release-assets: false
        output-file: ${{ env.SBOM_FILENAME }}.spdx.json

    - name: Scan SBOM
      id: scan_sbom
      uses: anchore/scan-action@v3
      with:
        sbom: ${{ env.SBOM_FILENAME }}.spdx.json
        output-format: sarif
        fail-build: false

    - name: Determine number of noticiable vulnerabilities
      id: count_vulnerabilities
      run: echo "value=$(grep -cE "(medium|high|critical) vulnerability" ${{ steps.scan_sbom.outputs.sarif }})" >> $GITHUB_OUTPUT

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: ${{ secrets.AWS_S3_SBOMS_ROLE_ARN }}
        aws-region: ${{ env.AWS_S3_REGION }}

    - name: Copy SBOM to S3
      run: |
        aws s3 cp ${{ env.SBOM_FILENAME }}.spdx.json s3://repos-sboms/${{ github.event.repository.name }}/command-${{ env.SBOM_FILENAME }}.spdx.json
        aws s3 cp ${{ steps.scan_sbom.outputs.sarif }} s3://repos-sboms/${{ github.event.repository.name }}/command-${{ env.SBOM_FILENAME }}-scan.sarif

    - name: Update Notion Page
      uses: ydataai/update-notion-page@v1
      env:
        STATUS_ICON: ${{ steps.count_vulnerabilities.outputs.value == '0' && '"✅"' || '"⚠️"' }}
        STATUS_URL: ${{ steps.count_vulnerabilities.outputs.value == '0' && 'null' || format('{{"url":"https://s3.console.aws.amazon.com/s3/buckets/repos-sboms?region={0}&prefix={1}/{2}-{3}-scan.sarif"}}', env.AWS_S3_REGION, github.event.repository.name, 'manager', env.SBOM_FILENAME) }}
      with:
        notion_secret: ${{ secrets.NOTION_SECRET }}
        notion_database_id: ${{ env.NOTION_DATABASE_ID }}
        notion_database_query_filter: '{  "property": "Repo",  "title": { "equals": "${{ github.event.repository.name }}" }  }'
        notion_page_update_properties: '{  "Docker Scan": { "rich_text": [ { "text": { "content": ${{ env.STATUS_ICON }}, "link": ${{ env.STATUS_URL }} } } ] }, "SBOMS": { "url": "https://s3.console.aws.amazon.com/s3/buckets/repos-sboms?region=${{ env.AWS_S3_REGION }}&prefix=${{ github.event.repository.name }}/" }  }'

    - name: Login to Dockerhub Registry
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}

    - name: Push Docker Image
      env:
        DOCKER_IMAGE_TAG: ${{ env.DOCKERHUB_REGISTRY }}/${{ env.DOCKER_REPOSITORY_COMMAND }}:${{ needs.prepare.outputs.version }}
      run: |
        docker tag ${{ steps.docker_build.outputs.imageId }} ${{ env.DOCKER_IMAGE_TAG }}
        docker push ${{ env.DOCKER_IMAGE_TAG }}


  build-lambda:
    name: Build and push LAMBDA version
    runs-on: ubuntu-20.04

    needs:
    - prepare

    steps:
    - uses: actions/checkout@v3

    - uses: actions/cache@v3
      with:
        path: .build
        key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
        restore-keys: |
          ${{ runner.os }}-spm-

    - name: Build Docker Image
      id: docker_build
      uses: docker/build-push-action@v4
      env:
        DOCKER_IMAGE_TAG: ${{ env.DOCKER_REPOSITORY_LAMBDA }}:${{ needs.prepare.outputs.version }}
      with:
        context: .
        file: lambda.Dockerfile
        push: false
        load: true
        tags: ${{ env.DOCKER_IMAGE_TAG }}

    - name: Create Docker SBOM
      uses: anchore/sbom-action@v0
      with:
        upload-artifact-retention: 1
        image: ${{ steps.docker_build.outputs.imageId }}
        format: spdx-json
        upload-release-assets: false
        output-file: ${{ env.SBOM_FILENAME }}.spdx.json

    - name: Scan SBOM
      id: scan_sbom
      uses: anchore/scan-action@v3
      with:
        sbom: ${{ env.SBOM_FILENAME }}.spdx.json
        output-format: sarif
        fail-build: false

    - name: Determine number of noticiable vulnerabilities
      id: count_vulnerabilities
      run: echo "value=$(grep -cE "(medium|high|critical) vulnerability" ${{ steps.scan_sbom.outputs.sarif }})" >> $GITHUB_OUTPUT

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: ${{ secrets.AWS_S3_SBOMS_ROLE_ARN }}
        aws-region: ${{ env.AWS_S3_REGION }}

    - name: Copy SBOM to S3
      run: |
        aws s3 cp ${{ env.SBOM_FILENAME }}.spdx.json s3://repos-sboms/${{ github.event.repository.name }}/lambda-${{ env.SBOM_FILENAME }}.spdx.json
        aws s3 cp ${{ steps.scan_sbom.outputs.sarif }} s3://repos-sboms/${{ github.event.repository.name }}/lambda-${{ env.SBOM_FILENAME }}-scan.sarif

    - name: Update Notion Page
      uses: ydataai/update-notion-page@v1
      env:
        STATUS_ICON: ${{ steps.count_vulnerabilities.outputs.value == '0' && '"✅"' || '"⚠️"' }}
        STATUS_URL: ${{ steps.count_vulnerabilities.outputs.value == '0' && 'null' || format('{{"url":"https://s3.console.aws.amazon.com/s3/buckets/repos-sboms?region={0}&prefix={1}/{2}-{3}-scan.sarif"}}', env.AWS_S3_REGION, github.event.repository.name, 'lambda', env.SBOM_FILENAME) }}
      with:
        notion_secret: ${{ secrets.NOTION_SECRET }}
        notion_database_id: ${{ env.NOTION_DATABASE_ID }}
        notion_database_query_filter: '{  "property": "Repo",  "title": { "equals": "${{ github.event.repository.name }}" }  }'
        notion_page_update_properties: '{  "Docker Scan": { "rich_text": [ { "text": { "content": ${{ env.STATUS_ICON }}, "link": ${{ env.STATUS_URL }} } } ] }, "SBOMS": { "url": "https://s3.console.aws.amazon.com/s3/buckets/repos-sboms?region=${{ env.AWS_S3_REGION }}&prefix=${{ github.event.repository.name }}/" }  }'

    - name: Login to Dockerhub Registry
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}

    - name: Push Docker Image
      env:
        DOCKER_IMAGE_TAG: ${{ env.DOCKERHUB_REGISTRY }}/${{ env.DOCKER_REPOSITORY_LAMBDA }}:${{ needs.prepare.outputs.version }}
      run: |
        docker tag ${{ steps.docker_build.outputs.imageId }} ${{ env.DOCKER_IMAGE_TAG }}
        docker push ${{ env.DOCKER_IMAGE_TAG }}


  update-manifests:
    name: Update AWS Marketplace
    runs-on: ubuntu-20.04

    needs:
    - prepare
    - build-command

    env:
      COMPONENT: ASG_TAGS_VERSION

    steps:
    - name: Checkout AWS Marketplace repo
      uses: actions/checkout@v3
      with:
        repository: ydataai/aws-marketplace
        token: ${{ secrets.ACCESS_TOKEN }}

    - name: Update aws-marketplace
      env:
        VERSION: ${{ needs.prepare.outputs.version }}
      run: echo ${{ env.VERSION }} > ${{ env.COMPONENT }}

    - name: Commit and push image update into manifests repo
      env:
        VERSION: ${{ needs.prepare.outputs.version }}
      run: |
        git config user.email "azory@ydata.ai"
        git config user.name "Azory YData Bot"
        git add ${{ env.COMPONENT }}
        git commit -a -m "chore(bump): [CI] [DEV] bump ${{ env.COMPONENT }} to $VERSION"
        git push origin master
